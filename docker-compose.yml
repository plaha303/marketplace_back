# Volumes
volumes:
  marketplace_db_data:
  redis_data:

services:
  # Postgres
  marketplace_database:
    image: postgres:alpine
    container_name: marketplace_database
    restart: unless-stopped
    volumes:
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./init-extensions.sql:/docker-entrypoint-initdb.d/00-init-extensions.sql
      - marketplace_db_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    expose:
      - 5432
    env_file:
      - backend_api/.env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      SCHEMA: public
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:alpine
    container_name: marketplace_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service to initialize extensions for existing databases
  db-extensions-init:
    image: postgres:alpine
    depends_on:
      marketplace_database:
        condition: service_healthy
    environment:
      PGPASSWORD: ${DB_PASSWORD}
      PGUSER: ${DB_USERNAME}
      PGDATABASE: ${DB_DATABASE}
    entrypoint: >
      sh -c "
      until pg_isready -h marketplace_database -U ${DB_USERNAME} -d ${DB_DATABASE}; do sleep 1; done;
      psql -h marketplace_database -U ${DB_USERNAME} -d ${DB_DATABASE} -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm;';
      psql -h marketplace_database -U ${DB_USERNAME} -d ${DB_DATABASE} -c 'CREATE EXTENSION IF NOT EXISTS unaccent;';
      "