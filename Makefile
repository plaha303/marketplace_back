#!/usr/bin/make

DOCKER_COMPOSE_BIN := $(shell command -v docker-compose 2>/dev/null || echo "docker compose")

# –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è
VENV_DIR := .venv
VENV_BIN := $(VENV_DIR)/bin
PYTHON_BIN := $(VENV_BIN)/python
PIP_BIN := $(VENV_BIN)/pip
VENV_ACTIVATE := $(VENV_BIN)/activate
VENV_ACTIVATE_WINDOWS := $(VENV_DIR)/Scripts/activate

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –û–°
ifeq ($(OS),Windows_NT)
    ACTIVATE := $(VENV_ACTIVATE_WINDOWS)
else
    ACTIVATE := $(VENV_ACTIVATE)
endif

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è
check_venv:
	@echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é, —á–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è..."
	@if [ ! -d "$(VENV_DIR)" ]; then \
		echo "‚ùå –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—é..."; \
		python3 -m venv $(VENV_DIR); \
		. $(ACTIVATE); \
		echo "üõ† –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è..."; \
	elif [ -z "$$VIRTUAL_ENV" ]; then \
		echo "‚ùå –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ. –ê–∫—Ç–∏–≤—É—é..."; \
		. $(ACTIVATE); \
	else \
		echo "‚úÖ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ."; \
	fi

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
install: check_venv
	@echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –∑ requirements.txt..."
	$(PIP_BIN) install -r backend_api/requirements.txt

up: install ## –ü–æ–≤–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ —É—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
	@echo "üöÄ –ó–∞–ø—É—Å–∫ —É—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
	$(DOCKER_COMPOSE_BIN) -f docker-compose.yml up -d
	@echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
	@sleep 10
	@echo "‚úÖ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ!"

down: ## –ó—É–ø–∏–Ω—è—î –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
	@echo "üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
	$(DOCKER_COMPOSE_BIN) -f docker-compose.yml down

restart: down up ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤

logs: ## –í–∏–≤–µ—Å—Ç–∏ –ª–æ–≥–∏ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
	$(DOCKER_COMPOSE_BIN) -f docker-compose.yml logs -f

ps: ## –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
	$(DOCKER_COMPOSE_BIN) -f docker-compose.yml ps

makemigrations: check_venv
	@echo "üõ† –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –º—ñ–≥—Ä–∞—Ü—ñ–π..."
	$(PYTHON_BIN) backend_api/manage.py makemigrations

migrate: check_venv
	@echo "üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ–π..."
	$(PYTHON_BIN) backend_api/manage.py migrate

super: ## –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	@echo "üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞..."
	$(PYTHON_BIN) backend_api/manage.py createsuperuser

kill: ## –ó—É–ø–∏–Ω–∫–∞ Django —Å–µ—Ä–≤–µ—Ä–∞
	@echo "üõë –ó—É–ø–∏–Ω–∫–∞ Django —Å–µ—Ä–≤–µ—Ä–∞..."
	@ps aux | grep "python backend_api/manage.py runserver" | grep -v grep | awk '{print $$2}' | xargs -r kill || echo "–°–µ—Ä–≤–µ—Ä –Ω–µ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π."

run: check_venv ## –ó–∞–ø—É—Å–∫–∞—î —Å–µ—Ä–≤–µ—Ä Django –±–µ–∑ Docker
	@echo "üöÄ –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞..."
	$(PYTHON_BIN) backend_api/manage.py runserver localhost:8000

test: check_venv ## –ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Å—Ç–∏ Django
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ Django..."
	$(PYTHON_BIN) backend_api/manage.py test core


PYTHON_BIN ?= python3

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É Celery Workers, Beat —ñ Flower
work: check_venv
	@echo "üöÄ –ó–∞–ø—É—Å–∫ Celery Workers (default, emails, images), Beat —ñ Flower –ª–æ–∫–∞–ª—å–Ω–æ..."
	@$(PYTHON_BIN) backend_api/manage.py run_worker --loglevel=INFO -Q default --hostname=worker-default@%h & echo $$! > worker-default.pid
	@$(PYTHON_BIN) backend_api/manage.py run_worker --loglevel=INFO -Q emails --hostname=worker-emails@%h & echo $$! > worker-emails.pid
	@$(PYTHON_BIN) backend_api/manage.py run_worker --loglevel=INFO -Q images --hostname=worker-images@%h & echo $$! > worker-images.pid
	@$(PYTHON_BIN) backend_api/manage.py run_beat --loglevel=INFO & echo $$! > beat.pid
	@$(PYTHON_BIN) backend_api/manage.py run_flower & echo $$! > flower.pid
	@echo "‚úÖ Celery Workers (default, emails, images), Beat —ñ Flower –∑–∞–ø—É—â–µ–Ω—ñ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ!"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ Celery Workers, Beat —ñ Flower
nowork:
	@echo "üõë –ó—É–ø–∏–Ω–∫–∞ Celery..."
	@if [ -f worker-default.pid ]; then kill `cat worker-default.pid` && rm worker-default.pid && echo "‚úÖ Default worker –∑—É–ø–∏–Ω–µ–Ω–æ." || echo "Default worker –Ω–µ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π."; fi
	@if [ -f worker-emails.pid ]; then kill `cat worker-emails.pid` && rm worker-emails.pid && echo "‚úÖ Emails worker –∑—É–ø–∏–Ω–µ–Ω–æ." || echo "Emails worker –Ω–µ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π."; fi
	@if [ -f worker-images.pid ]; then kill `cat worker-images.pid` && rm worker-images.pid && echo "‚úÖ Image worker –∑—É–ø–∏–Ω–µ–Ω–æ." || echo "Image worker –Ω–µ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π."; fi
	@if [ -f beat.pid ]; then kill `cat beat.pid` && rm beat.pid && echo "‚úÖ Beat –∑—É–ø–∏–Ω–µ–Ω–æ." || echo "Beat –Ω–µ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π."; fi
	@if [ -f flower.pid ]; then kill `cat flower.pid` && rm flower.pid && echo "‚úÖ Flower –∑—É–ø–∏–Ω–µ–Ω–æ." || echo "Flower –Ω–µ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π."; fi

seed: check_venv ## –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	@echo "üå± –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
	$(PYTHON_BIN) backend_api/manage.py seed_database --users 10 --categories 5 --products 20 --min_hits 10 --orders 5 --reviews 10 --favorites 10

flush: check_venv ## –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	@echo "üóë –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
	$(PYTHON_BIN) backend_api/manage.py flush --noinput